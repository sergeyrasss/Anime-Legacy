import os
import subprocess
import math
from pathlib import Path

def get_video_duration(input_file):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
    cmd = f"ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 '{input_file}'"
    try:
        duration = float(subprocess.check_output(cmd, shell=True, text=True).strip())
        return duration
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {str(e)}")
        return 0

def calculate_bitrate(target_mb, duration_sec, audio_bitrate=128):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ç—Ä–µ–±—É–µ–º—ã–π –≤–∏–¥–µ–æ–±–∏—Ç—Ä–µ–π—Ç –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
    if duration_sec <= 0:
        return 1500  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    target_kb = target_mb * 1024
    audio_kb = (audio_bitrate * duration_sec) / 8
    available_kb = target_kb - audio_kb
    return int((available_kb * 8) / duration_sec)

def convert_to_ios6_compatible(input_file, output_file, max_size_mb=90):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å iOS 6 —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–∞–∑–º–µ—Ä–∞"""
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
        duration = get_video_duration(input_file)
        if duration <= 0:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∏—Ç—Ä–µ–π—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            video_bitrate = 1500
        else:
            # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è 80% –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            video_bitrate = calculate_bitrate(max_size_mb * 0.8, duration)
            video_bitrate = max(500, min(video_bitrate, 3000))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            print(f"‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –±–∏—Ç—Ä–µ–π—Ç: {video_bitrate}k, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f} —Å–µ–∫")
        
        # 3. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        cmd = (
            f"ffmpeg -i '{input_file}' "
            "-c:v libx264 -profile:v baseline -level 3.0 "
            f"-b:v {video_bitrate}k -maxrate {video_bitrate}k -bufsize {video_bitrate * 2}k "
            "-pix_fmt yuv420p -vf 'scale=640:trunc(ow/a/2)*2' "
            "-c:a aac -b:a 96k "  # –£–º–µ–Ω—å—à–∞–µ–º –∞—É–¥–∏–æ–±–∏—Ç—Ä–µ–π—Ç
            "-movflags +faststart "
            "-r 24 -g 48 "  # –§–∏–∫—Å–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—É –∫–∞–¥—Ä–æ–≤
            f"'{output_file}'"
        )
        
        # 4. –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        print("üîÑ –ù–∞—á–∞–ª–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏...")
        result = subprocess.run(cmd, shell=True, stderr=subprocess.PIPE, text=True)
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {result.stderr[:500]}...")  # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –æ—à–∏–±–∫–∏
            return False
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not Path(output_file).exists():
            print("‚ùå –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
        
        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏ –ø–µ—Ä–µ–∂–∞—Ç–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        size_mb = os.path.getsize(output_file) / (1024 * 1024)
        if size_mb > max_size_mb:
            print(f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {size_mb:.2f} MB > {max_size_mb} MB, –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º...")
            return recompress_file(output_file, max_size_mb)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False

def recompress_file(input_file, max_size_mb):
    """–ü–µ—Ä–µ–∂–∏–º–∞–µ—Ç —Ñ–∞–π–ª –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration = get_video_duration(input_file)
        if duration <= 0:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø–µ—Ä–µ–∂–∞—Ç–∏—è")
            return False
        
        # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è 70% –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        new_bitrate = calculate_bitrate(max_size_mb * 0.7, duration)
        new_bitrate = max(400, new_bitrate)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç
        print(f"‚ÑπÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å –±–∏—Ç—Ä–µ–π—Ç–æ–º: {new_bitrate}k")
        
        # 3. –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∂–∞—Ç–∏—è
        temp_file = input_file.with_stem(input_file.stem + "_opt")
        cmd = (
            f"ffmpeg -i '{input_file}' "
            "-c:v libx264 -profile:v baseline -level 3.0 "
            f"-b:v {new_bitrate}k -maxrate {new_bitrate}k -bufsize {new_bitrate * 2}k "
            "-pix_fmt yuv420p -vf 'scale=480:trunc(ow/a/2)*2' "  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            "-c:a aac -b:a 64k "  # –°–∏–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –∞—É–¥–∏–æ
            "-movflags +faststart "
            "-r 24 -g 48 -preset fast -crf 26 "  # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
            f"'{temp_file}'"
        )
        
        # 4. –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–∂–∞—Ç–∏—è
        print("üîÑ –ü–µ—Ä–µ–∂–∞—Ç–∏–µ...")
        subprocess.run(cmd, shell=True, check=True)
        
        # 5. –ó–∞–º–µ–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        if temp_file.exists():
            os.replace(temp_file, input_file)
            final_size = os.path.getsize(input_file) / (1024 * 1024)
            print(f"‚ÑπÔ∏è –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {final_size:.2f} MB")
            return final_size <= max_size_mb
        
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∂–∞—Ç–∏–∏: {str(e)}")
        if temp_file.exists():
            temp_file.unlink()
        return False

def batch_convert_directory(input_dir, output_dir, max_size_mb=90):
    """–ü–∞–∫–µ—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–∞–∑–º–µ—Ä–∞"""
    input_path = Path(input_dir)
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True, parents=True)
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    formats = ['.mkv', '.mp4', '.avi', '.mov', '.flv', '.wmv']
    
    # –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤
    video_files = []
    for ext in formats:
        video_files.extend(input_path.glob(f'*{ext}'))
    
    if not video_files:
        print("‚ö†Ô∏è –í–∏–¥–µ–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(video_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–º–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: {max_size_mb}MB)")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    success_count = 0
    for video_file in video_files:
        output_file = output_path / f"{video_file.stem}_ios6.mp4"
        print(f"\nüîπ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {video_file.name} ‚Üí {output_file.name}")
        
        if convert_to_ios6_compatible(video_file, output_file, max_size_mb):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            size = os.path.getsize(output_file) / (1024 * 1024)
            if size <= max_size_mb:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –†–∞–∑–º–µ—Ä: {size:.2f} MB")
                success_count += 1
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç: {size:.2f} MB")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            # –£–¥–∞–ª–µ–Ω–∏–µ –±–∏—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
            if output_file.exists():
                output_file.unlink()
    
    print(f"\n‚ÑπÔ∏è –ì–æ—Ç–æ–≤–æ! –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(video_files)}")

def main():
    print("=== –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∏–¥–µ–æ –¥–ª—è iOS 6 ===")
    print("–°–æ–∑–¥–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ MP4 —Ñ–∞–π–ª—ã ‚â§90MB –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ Apple\n")
    
    input_dir = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –≤–∏–¥–µ–æ [—Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞]: ").strip() or "."
    output_dir = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ [ios6_videos]: ").strip() or "ios6_videos"
    
    if not os.path.isdir(input_dir):
        print(f"‚ùå –û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - {input_dir}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    Path(output_dir).mkdir(exist_ok=True, parents=True)
    
    batch_convert_directory(input_dir, output_dir, max_size_mb=90)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
