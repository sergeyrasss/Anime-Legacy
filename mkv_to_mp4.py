import os
import subprocess
import math
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor

def get_video_info(input_file):
    """–ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥)
        cmd_duration = f"ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 '{input_file}'"
        duration = float(subprocess.check_output(cmd_duration, shell=True, text=True).strip())
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        cmd_res = f"ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=p=0 '{input_file}'"
        res = subprocess.check_output(cmd_res, shell=True, text=True).strip().split(',')
        width, height = int(res[0]), int(res[1])
        
        return duration, width, height
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ {input_file}: {str(e)}")
        raise

def calculate_bitrate(target_mb, duration_sec):
    """–†–∞—Å—á–µ—Ç –±–∏—Ç—Ä–µ–π—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    if duration_sec <= 0:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ")
    return int((target_mb * 8192) / duration_sec)

def convert_file(mkv_file, max_size_mb=90):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    mp4_file = mkv_file.with_suffix(".mp4")
    print(f"‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞: {mkv_file.name}")
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ
        duration, width, height = get_video_info(mkv_file)
        
        # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç
        target_bitrate = calculate_bitrate(max_size_mb * 0.85, duration)
        
        # 3. –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –≤ –∏–º–µ–Ω–∏
        safe_input = str(mkv_file).replace("'", "'\\''")
        safe_output = str(mp4_file).replace("'", "'\\''")
        
        cmd = (
            f"ffmpeg -i '{safe_input}' -threads 4 "
            "-c:v libx264 -preset fast -crf 23 "
            f"-b:v {target_bitrate}k -maxrate {target_bitrate}k "
            f"-bufsize {target_bitrate//2}k -vf scale={width//2*2}:{height//2*2} "
            "-c:a aac -b:a 96k -movflags +faststart -y "
            f"'{safe_output}'"
        )
        
        # 4. –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
        subprocess.run(cmd, shell=True, check=True)
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not mp4_file.exists():
            raise Exception("–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
            
        # 6. –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫
        mkv_file.unlink()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {mp4_file.name} ({os.path.getsize(mp4_file)//1048576} MB)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {mk4_file.name}: {str(e)}")
        if mp4_file.exists():
            mp4_file.unlink()

def main():
    print("üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π MKV –≤ MP4 –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä (max 90MB)")
    print("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã\n")
    
    mkv_files = list(Path.cwd().glob("*.mkv"))
    if not mkv_files:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ MKV —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ—Ç–æ–∫–æ–≤
    with ThreadPoolExecutor(max_workers=2) as executor:
        for file in mkv_files:
            executor.submit(convert_file, file)
    
    print("\n–ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for mp4 in Path.cwd().glob("*.mp4"):
        size = os.path.getsize(mp4) // 1048576  # –†–∞–∑–º–µ—Ä –≤ MB
        print(f"- {mp4.name} ({size} MB)")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
