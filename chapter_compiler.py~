import os
from collections import defaultdict

def group_by_chapter(filename):
    chapters = defaultdict(list)
    with open(filename, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if not line:
                continue
            parts = line.split('/')
            chapter_part = next(p for p in parts if p.startswith('vol') and '_ch' in p)
            chapter_num = chapter_part.split('_ch')[-1]
            chapters[chapter_num].append(line)
    return chapters

def get_previous_chapter(current_chapter, all_chapters):
    chapter_list = sorted(all_chapters.keys())
    try:
        index = chapter_list.index(current_chapter)
        if index > 0:
            return chapter_list[index-1]
    except ValueError:
        pass
    return None

def get_next_chapter(current_chapter, all_chapters):
    chapter_list = sorted(all_chapters.keys())
    try:
        index = chapter_list.index(current_chapter)
        if index < len(chapter_list)-1:
            return chapter_list[index+1]
    except ValueError:
        pass
    return None

def generate_html(chapter_num, image_urls, all_chapters):
    prev_chapter = get_previous_chapter(chapter_num, all_chapters)
    next_chapter = get_next_chapter(chapter_num, all_chapters)
    
    html_template = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Grand Blue - Глава {chapter_num}</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            background-color: #000;
            overflow-x: hidden;
        }}
        
        .page-container {{
            width: 100vw;
            margin: 0;
            padding: 0;
        }}
        
        .page-image {{
            width: 100%;
            display: block;
            margin: 0 auto;
        }}
        
        .chapter-navigation {{
            background-color: #000;
            padding: 20px;
            text-align: center;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 15px;
        }}
        
        .chapter-selector {{
            padding: 12px 25px;
            border-radius: 25px;
            border: none;
            background-color: #222;
            color: white;
            font-size: 18px;
            width: 90%;
            max-width: 400px;
            cursor: pointer;
        }}
        
        .home-button {{
            padding: 12px 25px;
            border-radius: 25px;
            border: none;
            background-color: #FF6B00;
            color: white;
            font-size: 18px;
            width: 90%;
            max-width: 400px;
            cursor: pointer;
            text-decoration: none;
            text-align: center;
            font-weight: bold;
        }}
        
        @media (orientation: landscape) {{
            .page-image {{
                width: auto;
                height: 100vh;
            }}
        }}
    </style>
</head>
<body>
    <div class="reader-content">"""
    
    for url in image_urls:
        html_template += f"""
        <div class="page-container">
            <img class="page-image" src="{url}" loading="lazy">
        </div>"""
    
    # Генерация опций для выбора главы
    options = []
    for ch in sorted(all_chapters.keys()):
        selected = 'selected' if ch == chapter_num else ''
        options.append(f'<option value="chapter_{ch}.html" {selected}>Глава {ch}</option>')
    
    html_template += f"""
    </div>
    
    <div class="chapter-navigation">
        <select class="chapter-selector" onchange="location = this.value;">
            <option value="">Выберите главу...</option>
            {''.join(options)}
        </select>
    </div>
</body>
</html>"""
    
    return html_template

def main():
    input_file = 'grand_blue_images_modified.txt'
    chapters = group_by_chapter(input_file)
    
    # Создаем HTML для каждой главы
    for chapter_num, urls in chapters.items():
        html = generate_html(chapter_num, urls, chapters)
        with open(f'chapter_{chapter_num}.html', 'w', encoding='utf-8') as f:
            f.write(html)
    
    print(f"Сгенерировано {len(chapters)} HTML-файлов глав")

if __name__ == "__main__":
    main()