import os
import requests
from collections import defaultdict
from concurrent.futures import ThreadPoolExecutor

# Настройка User-Agent для iPhone 3GS (iOS 6.1.6)
HEADERS = {
    'User-Agent': 'Mozilla/5.0 (iPhone; U; CPU iPhone OS 6_1_6 like Mac OS X; en-us) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B500'
}

def check_url(url):
    """Проверяет доступность URL с iPhone 3GS User-Agent"""
    try:
        response = requests.head(url, headers=HEADERS, timeout=10, allow_redirects=True)
        return url if response.status_code == 200 else None
    except:
        return None

def group_by_chapter(filename):
    chapters = defaultdict(list)
    with open(filename, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if not line or ',' not in line:
                continue
                
            weserv_url, duckduckgo_url = line.split(',')
            chapter_part = next(p for p in weserv_url.split('/') if p.startswith('vol') and '_ch' in p)
            chapter_num = chapter_part.split('_ch')[-1]
            chapters[chapter_num].append((weserv_url, duckduckgo_url))
    return chapters

def generate_html(chapter_num, image_urls, all_chapters):
    html_template = f"""<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ru" xml:lang="ru">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=320, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>Grand Blue Глава {chapter_num}</title>
    <style type="text/css">
        body {{
            background-color: #000000;
            margin: 0;
            padding: 0;
            font-family: Helvetica;
            -webkit-text-size-adjust: none;
        }}
        .page-container {{
            width: 320px;
            margin: 0 auto;
            padding: 5px 0;
        }}
        .page-image {{
            width: 100%;
            height: auto;
            display: block;
        }}
        .navigation {{
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: #000;
            padding: 8px 0;
            text-align: center;
            border-top: 1px solid #333;
        }}
        select, a.button {{
            display: block;
            width: 300px;
            margin: 5px auto;
            font-size: 14px;
        }}
        select {{
            height: 30px;
            background: #222;
            color: #FFF;
            border: none;
            -webkit-appearance: none;
            padding: 0 10px;
        }}
        a.button {{
            background: #FF6B00;
            color: #FFF;
            text-decoration: none;
            padding: 6px 0;
            border-radius: 3px;
        }}
        .loading {{
            color: #FFF;
            text-align: center;
            padding: 20px;
            font-size: 16px;
        }}
    </style>
</head>
<body>
    <div class="content">"""

    # Проверяем доступность ссылок (максимум 3 потока для старых устройств)
    working_urls = []
    with ThreadPoolExecutor(max_workers=3) as executor:
        futures = []
        for weserv_url, duckduckgo_url in image_urls:
            futures.append(executor.submit(check_url, weserv_url))
            futures.append(executor.submit(check_url, duckduckgo_url))
        
        for i, future in enumerate(futures):
            result = future.result()
            if result:
                working_urls.append(result)
                break  # Используем первую рабочую ссылку из двух вариантов

    if not working_urls:
        html_template += '<div class="loading">Изображения временно недоступны</div>'
    else:
        for url in working_urls:
            html_template += f"""
        <div class="page-container">
            <img class="page-image" src="{url}" />"""

    # Генерация опций для выбора главы
    options = []
    for ch in sorted(all_chapters.keys(), key=lambda x: int(x)):
        selected = ' selected="selected"' if ch == chapter_num else ''
        options.append(f'<option value="chapter_{ch}.html"{selected}>Глава {ch}</option>')
    
    html_template += f"""
    </div>
    
    <div class="navigation">
        <select onchange="window.location=this.value;">
            <option value="">Выберите главу...</option>
            {''.join(options)}
        </select>
        <a href="index.html" class="button">На главную</a>
    </div>
</body>
</html>"""
    
    return html_template

def main():
    input_file = 'grand_blue_images_modified.txt'
    chapters = group_by_chapter(input_file)
    
    # Создаем папку для глав
    if not os.path.exists('chapters'):
        os.makedirs('chapters')
    
    # Генерация HTML для каждой главы
    for chapter_num, urls in chapters.items():
        print(f"Обработка главы {chapter_num}...")
        html = generate_html(chapter_num, urls, chapters)
        with open(f'chapters/chapter_{chapter_num}.html', 'w', encoding='utf-8') as f:
            f.write(html)
    
    print(f"\nГотово! Сгенерировано {len(chapters)} глав.")

if __name__ == "__main__":
    main()